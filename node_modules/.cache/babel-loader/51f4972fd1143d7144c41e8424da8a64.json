{"ast":null,"code":"var _jsxFileName = \"/Users/thenuja/weather-app/src/components/forecast/Forecast.js\";\nimport React, { useState } from 'react';\nimport Conditions from '../conditions/Conditions';\nimport classes from './Forecast.module.css';\n\nconst Forecast = () => {\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    } // Clear state in preparation for new data\n\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n    const uriEncodedCity = encodeURIComponent(city);\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"8c2c2fef07msh10d93721ff32400p16cad6jsn381f169eb509\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Find Current Weather Conditions\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getForecast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter City\",\n    maxLength: \"50\",\n    className: classes.textInput,\n    value: city,\n    onChange: e => setCity(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: classes.Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"imperial\",\n    value: \"imperial\",\n    onChange: e => setUnit(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), \"Fahrenheit\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: classes.Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"metric\",\n    value: \"metric\",\n    onChange: e => setUnit(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }), \"Celcius\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"Get Forecast\")), /*#__PURE__*/React.createElement(Conditions, {\n    responseObj: responseObj,\n    error: error,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/thenuja/weather-app/src/components/forecast/Forecast.js"],"names":["React","useState","Conditions","classes","Forecast","city","setCity","unit","setUnit","responseObj","setResponseObj","error","setError","loading","setLoading","getForecast","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","then","response","json","cod","Error","catch","err","console","log","message","textInput","target","value","Radio","Button"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Conditions from '../conditions/Conditions';\nimport classes from './Forecast.module.css';\n\nconst Forecast = () => {\n\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    let [responseObj, setResponseObj] = useState({});\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n\nfunction getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n        return setError(true);\n    }\n\n    // Clear state in preparation for new data\n    setError(false);\n    setResponseObj({});\n    \n    setLoading(true);\n    \n    const uriEncodedCity = encodeURIComponent(city);\n\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"8c2c2fef07msh10d93721ff32400p16cad6jsn381f169eb509\"\n        }\n    })\n    .then(response => response.json())\n    .then(response => {\n        if (response.cod !== 200) {\n            throw new Error()\n        }\n\n        setResponseObj(response);\n        setLoading(false);\n    })\n    .catch(err => {\n        setError(true);\n        setLoading(false);\n        console.log(err.message);\n    });\n}\n\n    return (\n        <div>\n            <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               error={error}\n               loading={loading}\n               />\n        </div>\n    )\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}